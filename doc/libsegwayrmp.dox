/*!
\mainpage SegwayRMP Library

\author William Woodall <wjwwood@gmail.com>

\section what_is What is libsegwayrmp?
Simply put, it is a library for interfacing with Segway's RMP line of robotic platforms.

Want to use it in your own library? \ref inyourlibrary

Want to use it with ROS(Robot Operating System)? http://www.ros.org/wiki/segway_rmp

\section features Features
- Linux and Mac OS X Support
- Multiple Interface Methods:
 - USB via FTDI's D2XX Driver
 - Serial via FTDI's VCP (Virtual COM Port) Driver
- Access to all settings and commands on the Segway RMP

\section install Installation

\subsection Dependencies

- CMake:
 - CMake is required for building the system and can be located here: http://www.cmake.org/
- Boost:
 - Boost is required because it is used for threading.  Boost can be located here: http://www.boost.org/
- USB FTD2XX:
 - In order to use the FTD2XX based USB interface you need to have installed the D2XX drivers located here: http://www.ftdichip.com/Drivers/D2XX.htm
- Serial (VCP):
 - In order to have the RMP show up as a serial port in your OS, you will need to install the FTDI VCP driver located here: http://www.ftdichip.com/Drivers/VCP.htm
 - Note: This is the default on Linux and no action is required.
 - Additionally, to perform the serial communication the library requires a Serial library located here: https://github.com/wjwwood/serial

\subsection building Compiling

Once you have gathered the dependencies, you need to checkout the software from github.com: 

<pre>
    git clone git://github.com/wjwwood/libsegwayrmp.git
</pre>

Once you have checked out the source code from github.com you can enter the directory and build the software.

<pre>
    cd libsegwayrmp
    make
    make test # (optional) builds the example and tests, and runs the tests.
    make doc  # (optional) builds _this_ documentation.
</pre>

\subsection installing Installing

To install simply:

<pre>
    sudo make install
</pre>

To uninstall simply:

<pre>
    sudo make uninstall
</pre>

\page inyourlibrary Using libsegwayrmp in your project

libsegwayrmp is not intended to be used stand alone.  Therefore special consideration was given in the design of the build system that should allow easier integration into existing projects and middlewares.  Additionally, you can make libsegwayrmp a dependency by requiring it be installed to the system (i.e. `make install` on libsegwayrmp) and then you can use normal methods to include it into your project.

\section buildsystem Build System

The build system used is cmake, and currently you best option for integrating is to also use cmake.

\subsection buildflags CMAKE Variables

There are several cmake variables that can be set to control how the libsegwayrmp library is built.

- SEGWAYRMP_BUILD_TESTS (ON or OFF):
 - This variable controls whether or not the tests are built for libsegwayrmp. Default is OFF.
- SEGWAYRMP_BUILD_EXAMPLES (ON or OFF):
 - This variable controls whether or not the tests are builr for libsegwayrmp. Default is OFF.
- SEGWAYRMP_USE_SERIAL (ON or OFF):
 - This variable controls whether or not support for Serial communication is built. Default is ON.
- SEGWAYRMP_USE_FTD2XX (ON or OFF):
 - This variable controls whether or not support for FTD2XX communication is built. Default is ON.

\subsection depedency_resolution Resolving Dependencies

If you do not ensure that the optional dependencies are found then some support might be disabled by the build system.  For example, if you enable Serial communication support, but do not have the serial library installed on your system or you do not manually build and specify the serial library then support will be disabled because it cannot find the library.  By default the serial library dependency can be overridden by setting a few CMAKE variables.  This is an example snippet of Makefile that manually specifying how to find the serial library, notice how the serial_* cmake variable are set to override the use of FindSerial.cmake:

<pre>
    CMAKE_ARGS = -D serial_FOUND=TRUE \
                 -D serial_INCLUDE_DIRS="$(shell rospack find serial_segway_rmp)/include/"
    ifeq ($(UNAME), Darwin)
        CMAKE_ARGS += -D serial_LIBRARIES="$(shell rospack find serial_segway_rmp)/lib/libserial.dylib"
    else
        CMAKE_ARGS += -D serial_LIBRARIES="$(shell rospack find serial_segway_rmp)/lib/libserial.a"
    endif
    
    cd build \&\& cmake $(CMAKE_ARGS) ..
</pre>

 */